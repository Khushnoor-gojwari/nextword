{"ast":null,"code":"var _jsxFileName = \"/home/khuram/ReactProjects/NextWordPred/src/NextWordPrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NextWordPrediction() {\n  _s();\n  const [text, setText] = useState('');\n  const [numWords, setNumWords] = useState(1); // Added for specifying number of words to predict\n  const [predictedText, setPredictedText] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Send POST request to FastAPI backend with both text and number of words\n      const response = await axios.post('http://localhost:8000/predict', {\n        text: text,\n        num_words: numWords\n      });\n      setPredictedText(response.data.predicted_text); // Expecting full sentence response\n    } catch (error) {\n      console.error('Error predicting next word:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Next Word Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Enter text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numWords,\n        onChange: e => setNumWords(e.target.value),\n        placeholder: \"Number of words\",\n        min: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Predict Next Word(s)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), predictedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predicted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: predictedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n_s(NextWordPrediction, \"WaKR1axsyHuI4CX1ng5qlQvhQV8=\");\n_c = NextWordPrediction;\nexport default NextWordPrediction;\nvar _c;\n$RefreshReg$(_c, \"NextWordPrediction\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","NextWordPrediction","_s","text","setText","numWords","setNumWords","predictedText","setPredictedText","handleSubmit","e","preventDefault","response","post","num_words","data","predicted_text","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","min","_c","$RefreshReg$"],"sources":["/home/khuram/ReactProjects/NextWordPred/src/NextWordPrediction.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction NextWordPrediction() {\n    const [text, setText] = useState('');\n    const [numWords, setNumWords] = useState(1); // Added for specifying number of words to predict\n    const [predictedText, setPredictedText] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            // Send POST request to FastAPI backend with both text and number of words\n            const response = await axios.post('http://localhost:8000/predict', {\n                text: text,\n                num_words: numWords,\n            });\n            setPredictedText(response.data.predicted_text); // Expecting full sentence response\n        } catch (error) {\n            console.error('Error predicting next word:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Next Word Prediction</h1>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    placeholder=\"Enter text\"\n                />\n                <input\n                    type=\"number\"\n                    value={numWords}\n                    onChange={(e) => setNumWords(e.target.value)}\n                    placeholder=\"Number of words\"\n                    min=\"1\"\n                />\n                <button type=\"submit\">Predict Next Word(s)</button>\n            </form>\n            {predictedText && (\n                <div>\n                    <h2>Predicted Text:</h2>\n                    <p>{predictedText}</p>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default NextWordPrediction;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,+BAA+B,EAAE;QAC/DV,IAAI,EAAEA,IAAI;QACVW,SAAS,EAAET;MACf,CAAC,CAAC;MACFG,gBAAgB,CAACI,QAAQ,CAACG,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED,oBACIjB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BvB,OAAA;MAAMwB,QAAQ,EAAEf,YAAa;MAAAU,QAAA,gBACzBnB,OAAA;QACIyB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEvB,IAAK;QACZwB,QAAQ,EAAGjB,CAAC,IAAKN,OAAO,CAACM,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;QACzCG,WAAW,EAAC;MAAY;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,eACFvB,OAAA;QACIyB,IAAI,EAAC,QAAQ;QACbC,KAAK,EAAErB,QAAS;QAChBsB,QAAQ,EAAGjB,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;QAC7CG,WAAW,EAAC,iBAAiB;QAC7BC,GAAG,EAAC;MAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACFvB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EACNhB,aAAa,iBACVP,OAAA;MAAAmB,QAAA,gBACInB,OAAA;QAAAmB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBvB,OAAA;QAAAmB,QAAA,EAAIZ;MAAa;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACrB,EAAA,CA9CQD,kBAAkB;AAAA8B,EAAA,GAAlB9B,kBAAkB;AAgD3B,eAAeA,kBAAkB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}