{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name2 in all) __defProp(target, name2, {\n    get: all[name2],\n    enumerable: true\n  });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  textToVideo: () => textToVideo,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/config.ts\nvar HF_HUB_URL = \"https://huggingface.co\";\n\n// src/providers/fal-ai.ts\nvar FAL_AI_API_BASE_URL = \"https://fal.run\";\nvar FAL_AI_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-schnell\": \"fal-ai/flux/schnell\",\n    \"black-forest-labs/FLUX.1-dev\": \"fal-ai/flux/dev\",\n    \"playgroundai/playground-v2.5-1024px-aesthetic\": \"fal-ai/playground-v25\",\n    \"ByteDance/SDXL-Lightning\": \"fal-ai/lightning-models\",\n    \"PixArt-alpha/PixArt-Sigma-XL-2-1024-MS\": \"fal-ai/pixart-sigma\",\n    \"stabilityai/stable-diffusion-3-medium\": \"fal-ai/stable-diffusion-v3-medium\",\n    \"Warlord-K/Sana-1024\": \"fal-ai/sana\",\n    \"fal/AuraFlow-v0.2\": \"fal-ai/aura-flow\",\n    \"stabilityai/stable-diffusion-3.5-large\": \"fal-ai/stable-diffusion-v35-large\",\n    \"stabilityai/stable-diffusion-3.5-large-turbo\": \"fal-ai/stable-diffusion-v35-large/turbo\",\n    \"stabilityai/stable-diffusion-3.5-medium\": \"fal-ai/stable-diffusion-v35-medium\",\n    \"Kwai-Kolors/Kolors\": \"fal-ai/kolors\"\n  },\n  \"automatic-speech-recognition\": {\n    \"openai/whisper-large-v3\": \"fal-ai/whisper\"\n  },\n  \"text-to-video\": {\n    \"genmo/mochi-1-preview\": \"fal-ai/mochi-v1\",\n    \"tencent/HunyuanVideo\": \"fal-ai/hunyuan-video\",\n    \"THUDM/CogVideoX-5b\": \"fal-ai/cogvideox-5b\",\n    \"Lightricks/LTX-Video\": \"fal-ai/ltx-video\"\n  }\n};\n\n// src/providers/replicate.ts\nvar REPLICATE_API_BASE_URL = \"https://api.replicate.com\";\nvar REPLICATE_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-dev\": \"black-forest-labs/flux-dev\",\n    \"black-forest-labs/FLUX.1-schnell\": \"black-forest-labs/flux-schnell\",\n    \"ByteDance/Hyper-SD\": \"bytedance/hyper-flux-16step:382cf8959fb0f0d665b26e7e80b8d6dc3faaef1510f14ce017e8c732bb3d1eb7\",\n    \"ByteDance/SDXL-Lightning\": \"bytedance/sdxl-lightning-4step:5599ed30703defd1d160a25a63321b4dec97101d98b4674bcc56e41f62f35637\",\n    \"playgroundai/playground-v2.5-1024px-aesthetic\": \"playgroundai/playground-v2.5-1024px-aesthetic:a45f82a1382bed5c7aeb861dac7c7d191b0fdf74d8d57c4a0e6ed7d4d0bf7d24\",\n    \"stabilityai/stable-diffusion-3.5-large-turbo\": \"stability-ai/stable-diffusion-3.5-large-turbo\",\n    \"stabilityai/stable-diffusion-3.5-large\": \"stability-ai/stable-diffusion-3.5-large\",\n    \"stabilityai/stable-diffusion-3.5-medium\": \"stability-ai/stable-diffusion-3.5-medium\",\n    \"stabilityai/stable-diffusion-xl-base-1.0\": \"stability-ai/sdxl:7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc\"\n  },\n  \"text-to-speech\": {\n    \"OuteAI/OuteTTS-0.3-500M\": \"jbilcke/oute-tts:3c645149db020c85d080e2f8cfe482a0e68189a922cde964fa9e80fb179191f3\",\n    \"hexgrad/Kokoro-82M\": \"jaaari/kokoro-82m:dfdf537ba482b029e0a761699e6f55e9162cfd159270bfe0e44857caa5f275a6\"\n  },\n  \"text-to-video\": {\n    \"genmo/mochi-1-preview\": \"genmoai/mochi-1:1944af04d098ef69bed7f9d335d102e652203f268ec4aaa2d836f6217217e460\"\n  }\n};\n\n// src/providers/sambanova.ts\nvar SAMBANOVA_API_BASE_URL = \"https://api.sambanova.ai\";\nvar SAMBANOVA_SUPPORTED_MODEL_IDS = {\n  /** Chat completion / conversational */\n  conversational: {\n    \"deepseek-ai/DeepSeek-Distill-R1-Llama-70B\": \"DeepSeek-Distill-R1-Llama-70B\",\n    \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen2.5-Coder-32B-Instruct\",\n    \"Qwen/Qwen2.5-72B-Instruct\": \"Qwen2.5-72B-Instruct\",\n    \"Qwen/QwQ-32B-Preview\": \"QwQ-32B-Preview\",\n    \"meta-llama/Llama-3.3-70B-Instruct\": \"Meta-Llama-3.3-70B-Instruct\",\n    \"meta-llama/Llama-3.2-1B-Instruct\": \"Meta-Llama-3.2-1B-Instruct\",\n    \"meta-llama/Llama-3.2-3B-Instruct\": \"Meta-Llama-3.2-3B-Instruct\",\n    \"meta-llama/Llama-3.2-11B-Vision-Instruct\": \"Llama-3.2-11B-Vision-Instruct\",\n    \"meta-llama/Llama-3.2-90B-Vision-Instruct\": \"Llama-3.2-90B-Vision-Instruct\",\n    \"meta-llama/Llama-3.1-8B-Instruct\": \"Meta-Llama-3.1-8B-Instruct\",\n    \"meta-llama/Llama-3.1-70B-Instruct\": \"Meta-Llama-3.1-70B-Instruct\",\n    \"meta-llama/Llama-3.1-405B-Instruct\": \"Meta-Llama-3.1-405B-Instruct\",\n    \"meta-llama/Llama-Guard-3-8B\": \"Meta-Llama-Guard-3-8B\"\n  }\n};\n\n// src/providers/together.ts\nvar TOGETHER_API_BASE_URL = \"https://api.together.xyz\";\nvar TOGETHER_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-Canny-dev\": \"black-forest-labs/FLUX.1-canny\",\n    \"black-forest-labs/FLUX.1-Depth-dev\": \"black-forest-labs/FLUX.1-depth\",\n    \"black-forest-labs/FLUX.1-dev\": \"black-forest-labs/FLUX.1-dev\",\n    \"black-forest-labs/FLUX.1-Redux-dev\": \"black-forest-labs/FLUX.1-redux\",\n    \"black-forest-labs/FLUX.1-schnell\": \"black-forest-labs/FLUX.1-pro\",\n    \"stabilityai/stable-diffusion-xl-base-1.0\": \"stabilityai/stable-diffusion-xl-base-1.0\"\n  },\n  conversational: {\n    \"databricks/dbrx-instruct\": \"databricks/dbrx-instruct\",\n    \"deepseek-ai/DeepSeek-R1\": \"deepseek-ai/DeepSeek-R1\",\n    \"deepseek-ai/DeepSeek-V3\": \"deepseek-ai/DeepSeek-V3\",\n    \"deepseek-ai/deepseek-llm-67b-chat\": \"deepseek-ai/deepseek-llm-67b-chat\",\n    \"google/gemma-2-9b-it\": \"google/gemma-2-9b-it\",\n    \"google/gemma-2b-it\": \"google/gemma-2-27b-it\",\n    \"meta-llama/Llama-2-13b-chat-hf\": \"meta-llama/Llama-2-13b-chat-hf\",\n    \"meta-llama/Llama-2-7b-chat-hf\": \"meta-llama/Llama-2-7b-chat-hf\",\n    \"meta-llama/Llama-3.2-11B-Vision-Instruct\": \"meta-llama/Llama-Vision-Free\",\n    \"meta-llama/Llama-3.2-3B-Instruct\": \"meta-llama/Llama-3.2-3B-Instruct-Turbo\",\n    \"meta-llama/Llama-3.2-90B-Vision-Instruct\": \"meta-llama/Llama-3.2-90B-Vision-Instruct-Turbo\",\n    \"meta-llama/Llama-3.3-70B-Instruct\": \"meta-llama/Llama-3.3-70B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3-70B-Instruct\": \"meta-llama/Llama-3-70b-chat-hf\",\n    \"meta-llama/Meta-Llama-3-8B-Instruct\": \"meta-llama/Meta-Llama-3-8B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-405B-Instruct\": \"meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-70B-Instruct\": \"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-8B-Instruct\": \"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K\",\n    \"microsoft/WizardLM-2-8x22B\": \"microsoft/WizardLM-2-8x22B\",\n    \"mistralai/Mistral-7B-Instruct-v0.3\": \"mistralai/Mistral-7B-Instruct-v0.3\",\n    \"mistralai/Mistral-Small-24B-Instruct-2501\": \"mistralai/Mistral-Small-24B-Instruct-2501\",\n    \"mistralai/Mixtral-8x22B-Instruct-v0.1\": \"mistralai/Mixtral-8x22B-Instruct-v0.1\",\n    \"mistralai/Mixtral-8x7B-Instruct-v0.1\": \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    \"NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO\": \"NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO\",\n    \"nvidia/Llama-3.1-Nemotron-70B-Instruct-HF\": \"nvidia/Llama-3.1-Nemotron-70B-Instruct-HF\",\n    \"Qwen/Qwen2-72B-Instruct\": \"Qwen/Qwen2-72B-Instruct\",\n    \"Qwen/Qwen2.5-72B-Instruct\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n    \"Qwen/Qwen2.5-7B-Instruct\": \"Qwen/Qwen2.5-7B-Instruct-Turbo\",\n    \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen/Qwen2.5-Coder-32B-Instruct\",\n    \"Qwen/QwQ-32B-Preview\": \"Qwen/QwQ-32B-Preview\",\n    \"scb10x/llama-3-typhoon-v1.5-8b-instruct\": \"scb10x/scb10x-llama3-typhoon-v1-5-8b-instruct\",\n    \"scb10x/llama-3-typhoon-v1.5x-70b-instruct-awq\": \"scb10x/scb10x-llama3-typhoon-v1-5x-4f316\"\n  },\n  \"text-generation\": {\n    \"meta-llama/Llama-2-70b-hf\": \"meta-llama/Llama-2-70b-hf\",\n    \"mistralai/Mixtral-8x7B-v0.1\": \"mistralai/Mixtral-8x7B-v0.1\"\n  }\n};\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// package.json\nvar name = \"@huggingface/inference\";\nvar version = \"3.1.6\";\n\n// src/lib/makeRequestOptions.ts\nvar HF_HUB_INFERENCE_PROXY_TEMPLATE = `${HF_HUB_URL}/api/inference-proxy/{{PROVIDER}}`;\nvar tasks = null;\nasync function makeRequestOptions(args, options) {\n  const {\n    accessToken,\n    endpointUrl,\n    provider: maybeProvider,\n    model: maybeModel,\n    ...remainingArgs\n  } = args;\n  let otherArgs = remainingArgs;\n  const provider = maybeProvider ?? \"hf-inference\";\n  const {\n    forceTask,\n    includeCredentials,\n    taskHint,\n    wait_for_model,\n    use_cache,\n    dont_load_model,\n    chatCompletion: chatCompletion2\n  } = options ?? {};\n  if (endpointUrl && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use endpointUrl with a third-party provider.`);\n  }\n  if (forceTask && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use forceTask with a third-party provider.`);\n  }\n  if (maybeModel && isUrl(maybeModel)) {\n    throw new Error(`Model URLs are no longer supported. Use endpointUrl instead.`);\n  }\n  let model;\n  if (!maybeModel) {\n    if (taskHint) {\n      model = mapModel({\n        model: await loadDefaultModel(taskHint),\n        provider,\n        taskHint,\n        chatCompletion: chatCompletion2\n      });\n    } else {\n      throw new Error(\"No model provided, and no default model found for this task\");\n    }\n  } else {\n    model = mapModel({\n      model: maybeModel,\n      provider,\n      taskHint,\n      chatCompletion: chatCompletion2\n    });\n  }\n  const authMethod = accessToken ? accessToken.startsWith(\"hf_\") ? \"hf-token\" : \"provider-key\" : includeCredentials === \"include\" ? \"credentials-include\" : \"none\";\n  const url = endpointUrl ? chatCompletion2 ? endpointUrl + `/v1/chat/completions` : endpointUrl : makeUrl({\n    authMethod,\n    chatCompletion: chatCompletion2 ?? false,\n    forceTask,\n    model,\n    provider: provider ?? \"hf-inference\",\n    taskHint\n  });\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = provider === \"fal-ai\" && authMethod === \"provider-key\" ? `Key ${accessToken}` : `Bearer ${accessToken}`;\n  }\n  const ownUserAgent = `${name}/${version}`;\n  headers[\"User-Agent\"] = [ownUserAgent, typeof navigator !== \"undefined\" ? navigator.userAgent : void 0].filter(x => x !== void 0).join(\" \");\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (provider === \"hf-inference\") {\n    if (wait_for_model) {\n      headers[\"X-Wait-For-Model\"] = \"true\";\n    }\n    if (use_cache === false) {\n      headers[\"X-Use-Cache\"] = \"false\";\n    }\n    if (dont_load_model) {\n      headers[\"X-Load-Model\"] = \"0\";\n    }\n  }\n  if (provider === \"replicate\") {\n    headers[\"Prefer\"] = \"wait\";\n  }\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  if (provider === \"replicate\") {\n    const version2 = model.includes(\":\") ? model.split(\":\")[1] : void 0;\n    otherArgs = {\n      input: otherArgs,\n      version: version2\n    };\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...otherArgs,\n      ...(chatCompletion2 || provider === \"together\" ? {\n        model\n      } : void 0)\n    }),\n    ...(credentials ? {\n      credentials\n    } : void 0),\n    signal: options?.signal\n  };\n  return {\n    url,\n    info\n  };\n}\nfunction mapModel(params) {\n  if (params.provider === \"hf-inference\") {\n    return params.model;\n  }\n  if (!params.taskHint) {\n    throw new Error(\"taskHint must be specified when using a third-party provider\");\n  }\n  const task = params.taskHint === \"text-generation\" && params.chatCompletion ? \"conversational\" : params.taskHint;\n  const model = (() => {\n    switch (params.provider) {\n      case \"fal-ai\":\n        return FAL_AI_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"replicate\":\n        return REPLICATE_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"sambanova\":\n        return SAMBANOVA_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"together\":\n        return TOGETHER_SUPPORTED_MODEL_IDS[task]?.[params.model];\n    }\n  })();\n  if (!model) {\n    throw new Error(`Model ${params.model} is not supported for task ${task} and provider ${params.provider}`);\n  }\n  return model;\n}\nfunction makeUrl(params) {\n  if (params.authMethod === \"none\" && params.provider !== \"hf-inference\") {\n    throw new Error(\"Authentication is required when requesting a third-party provider. Please provide accessToken\");\n  }\n  const shouldProxy = params.provider !== \"hf-inference\" && params.authMethod !== \"provider-key\";\n  switch (params.provider) {\n    case \"fal-ai\":\n      {\n        const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : FAL_AI_API_BASE_URL;\n        return `${baseUrl}/${params.model}`;\n      }\n    case \"replicate\":\n      {\n        const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : REPLICATE_API_BASE_URL;\n        if (params.model.includes(\":\")) {\n          return `${baseUrl}/v1/predictions`;\n        }\n        return `${baseUrl}/v1/models/${params.model}/predictions`;\n      }\n    case \"sambanova\":\n      {\n        const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : SAMBANOVA_API_BASE_URL;\n        if (params.taskHint === \"text-generation\" && params.chatCompletion) {\n          return `${baseUrl}/v1/chat/completions`;\n        }\n        return baseUrl;\n      }\n    case \"together\":\n      {\n        const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : TOGETHER_API_BASE_URL;\n        if (params.taskHint === \"text-to-image\") {\n          return `${baseUrl}/v1/images/generations`;\n        }\n        if (params.taskHint === \"text-generation\") {\n          if (params.chatCompletion) {\n            return `${baseUrl}/v1/chat/completions`;\n          }\n          return `${baseUrl}/v1/completions`;\n        }\n        return baseUrl;\n      }\n    default:\n      {\n        const baseUrl = HF_HUB_INFERENCE_PROXY_TEMPLATE.replaceAll(\"{{PROVIDER}}\", \"hf-inference\");\n        const url = params.forceTask ? `${baseUrl}/pipeline/${params.forceTask}/${params.model}` : `${baseUrl}/models/${params.model}`;\n        if (params.taskHint === \"text-generation\" && params.chatCompletion) {\n          return url + `/v1/chat/completions`;\n        }\n        return url;\n      }\n  }\n}\nasync function loadDefaultModel(task) {\n  if (!tasks) {\n    tasks = await loadTaskInfo();\n  }\n  const taskInfo = tasks[task];\n  if ((taskInfo?.models.length ?? 0) <= 0) {\n    throw new Error(`No default model defined for task ${task}, please define the model explicitly.`);\n  }\n  return taskInfo.models[0].id;\n}\nasync function loadTaskInfo() {\n  const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n  if (!res.ok) {\n    throw new Error(\"Failed to load tasks definitions from Hugging Face Hub.\");\n  }\n  return await res.json();\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const {\n    url,\n    info\n  } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    const contentType = response.headers.get(\"Content-Type\");\n    if ([\"application/json\", \"application/problem+json\"].some(ct => contentType?.startsWith(ct))) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${JSON.stringify(output.error)}`);\n      }\n      if (output.error || output.detail) {\n        throw new Error(JSON.stringify(output.error ?? output.detail));\n      } else {\n        throw new Error(output);\n      }\n    }\n    const message = contentType?.startsWith(\"text/plain;\") ? await response.text() : void 0;\n    throw new Error(message ?? \"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const {\n    url,\n    info\n  } = await makeRequestOptions({\n    ...args,\n    stream: true\n  }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return yield* streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (typeof output.error === \"string\") {\n        throw new Error(output.error);\n      }\n      if (output.error && \"message\" in output.error && typeof output.error.message === \"string\") {\n        throw new Error(output.error.message);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(`Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\"));\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = event => {\n    events.push(event);\n  };\n  const onChunk = getLines(getMessages(() => {}, () => {}, onEvent));\n  try {\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) {\n        return;\n      }\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            const errorStr = typeof data.error === \"string\" ? data.error : typeof data.error === \"object\" && data.error && \"message\" in data.error && typeof data.error.message === \"string\" ? data.error.message : JSON.stringify(data.error);\n            throw new Error(`Error forwarded from backend: ` + errorStr);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(`Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`);\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign({}, ...props.map(prop => {\n    if (o[prop] !== void 0) {\n      return {\n        [prop]: o[prop]\n      };\n    }\n  }));\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter(prop => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/tasks/audio/utils.ts\nfunction preparePayload(args) {\n  return \"data\" in args ? args : {\n    ...omit(args, \"inputs\"),\n    data: args.inputs\n  };\n}\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach(byte => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const payload = await buildPayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\nvar FAL_AI_SUPPORTED_BLOB_TYPES = [\"audio/mpeg\", \"audio/mp4\", \"audio/wav\", \"audio/x-wav\"];\nasync function buildPayload(args) {\n  if (args.provider === \"fal-ai\") {\n    const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : void 0;\n    const contentType = blob?.type;\n    if (!contentType) {\n      throw new Error(`Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`);\n    }\n    if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {\n      throw new Error(`Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(\", \")}`);\n    }\n    const base64audio = base64FromBytes(new Uint8Array(await blob.arrayBuffer()));\n    return {\n      ...(\"data\" in args ? omit(args, \"data\") : omit(args, \"inputs\")),\n      audio_url: `data:${contentType};base64,${base64audio}`\n    };\n  } else {\n    return preparePayload(args);\n  }\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const payload = args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    text: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-speech\"\n  });\n  if (res instanceof Blob) {\n    return res;\n  }\n  if (res && typeof res === \"object\") {\n    if (\"output\" in res) {\n      if (typeof res.output === \"string\") {\n        const urlResponse = await fetch(res.output);\n        const blob = await urlResponse.blob();\n        return blob;\n      } else if (Array.isArray(res.output)) {\n        const urlResponse = await fetch(res.output[0]);\n        const blob = await urlResponse.blob();\n        return blob;\n      }\n    }\n  }\n  throw new InferenceOutputError(\"Expected Blob or object with output\");\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"audio-to-audio\"\n  });\n  return validateOutput(res);\n}\nfunction validateOutput(output) {\n  if (!Array.isArray(output)) {\n    throw new InferenceOutputError(\"Expected Array\");\n  }\n  if (!output.every(elem => {\n    return typeof elem === \"object\" && elem && \"label\" in elem && typeof elem.label === \"string\" && \"content-type\" in elem && typeof elem[\"content-type\"] === \"string\" && \"blob\" in elem && typeof elem.blob === \"string\";\n  })) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, audio: Blob}>\");\n  }\n  return output;\n}\n\n// src/tasks/cv/utils.ts\nfunction preparePayload2(args) {\n  return \"data\" in args ? args : {\n    ...omit(args, \"inputs\"),\n    data: args.inputs\n  };\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const payload = preparePayload2(args);\n  const res = (await request(payload, {\n    ...options,\n    taskHint: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const payload = args.provider === \"together\" || args.provider === \"fal-ai\" || args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    ...(args.provider !== \"replicate\" ? {\n      response_format: \"base64\"\n    } : void 0),\n    prompt: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-image\"\n  });\n  if (res && typeof res === \"object\") {\n    if (args.provider === \"fal-ai\" && \"images\" in res && Array.isArray(res.images) && res.images[0].url) {\n      const image = await fetch(res.images[0].url);\n      return await image.blob();\n    }\n    if (\"data\" in res && Array.isArray(res.data) && res.data[0].b64_json) {\n      const base64Data = res.data[0].b64_json;\n      const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);\n      const blob = await base64Response.blob();\n      return blob;\n    }\n    if (\"output\" in res && Array.isArray(res.output)) {\n      const urlResponse = await fetch(res.output[0]);\n      const blob = await urlResponse.blob();\n      return blob;\n    }\n  }\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function preparePayload3(args) {\n  if (args.inputs instanceof Blob) {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(new Uint8Array(await args.inputs.arrayBuffer()))\n      }\n    };\n  } else {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n      }\n    };\n  }\n}\nasync function zeroShotImageClassification(args, options) {\n  const payload = await preparePayload3(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToVideo.ts\nvar SUPPORTED_PROVIDERS = [\"fal-ai\", \"replicate\"];\nasync function textToVideo(args, options) {\n  if (!args.provider || !typedInclude(SUPPORTED_PROVIDERS, args.provider)) {\n    throw new Error(`textToVideo inference is only supported for the following providers: ${SUPPORTED_PROVIDERS.join(\", \")}`);\n  }\n  const payload = args.provider === \"fal-ai\" || args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    prompt: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-video\"\n  });\n  if (args.provider === \"fal-ai\") {\n    const isValidOutput = typeof res === \"object\" && !!res && \"video\" in res && typeof res.video === \"object\" && !!res.video && \"url\" in res.video && typeof res.video.url === \"string\" && isUrl(res.video.url);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { video: { url: string } }\");\n    }\n    const urlResponse = await fetch(res.video.url);\n    return await urlResponse.blob();\n  } else {\n    const isValidOutput = typeof res === \"object\" && !!res && \"output\" in res && typeof res.output === \"string\" && isUrl(res.output);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { output: string }\");\n    }\n    const urlResponse = await fetch(res.output);\n    return await urlResponse.blob();\n  }\n}\n\n// src/lib/getDefaultTask.ts\nvar taskCache = /* @__PURE__ */new Map();\nvar CACHE_DURATION = 10 * 60 * 1e3;\nvar MAX_CACHE_ITEMS = 1e3;\nasync function getDefaultTask(model, accessToken, options) {\n  if (isUrl(model)) {\n    return null;\n  }\n  const key = `${model}:${accessToken}`;\n  let cachedTask = taskCache.get(key);\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\n    taskCache.delete(key);\n    cachedTask = void 0;\n  }\n  if (cachedTask === void 0) {\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n      headers: accessToken ? {\n        Authorization: `Bearer ${accessToken}`\n      } : {}\n    }).then(resp => resp.json()).then(json => json.pipeline_tag).catch(() => null);\n    if (!modelTask) {\n      return null;\n    }\n    cachedTask = {\n      task: modelTask,\n      date: /* @__PURE__ */new Date()\n    };\n    taskCache.set(key, {\n      task: modelTask,\n      date: /* @__PURE__ */new Date()\n    });\n    if (taskCache.size > MAX_CACHE_ITEMS) {\n      taskCache.delete(taskCache.keys().next().value);\n    }\n  }\n  return cachedTask.task;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"feature-extraction\",\n    ...(defaultTask === \"sentence-similarity\" && {\n      forceTask: \"feature-extraction\"\n    })\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth) return false;\n    if (arr.every(x => Array.isArray(x))) {\n      return arr.every(x => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every(x => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every(elem => typeof elem === \"object\" && !!elem && typeof elem.answer === \"string\" && typeof elem.end === \"number\" && typeof elem.score === \"number\" && typeof elem.start === \"number\") : typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end: number, score: number, start: number}>\");\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(prepareInput(args), {\n    ...options,\n    taskHint: \"sentence-similarity\",\n    ...(defaultTask === \"feature-extraction\" && {\n      forceTask: \"sentence-similarity\"\n    })\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\nfunction prepareInput(args) {\n  return {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    inputs: {\n      ...omit(args.inputs, \"sourceSentence\")\n    },\n    parameters: {\n      source_sentence: args.inputs.sourceSentence,\n      ...args.parameters\n    }\n  };\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"table-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every(elem => validate(elem)) : validate(res);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\");\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\nfunction validate(elem) {\n  return typeof elem === \"object\" && !!elem && \"aggregator\" in elem && typeof elem.aggregator === \"string\" && \"answer\" in elem && typeof elem.answer === \"string\" && \"cells\" in elem && Array.isArray(elem.cells) && elem.cells.every(x => typeof x === \"string\") && \"coordinates\" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every(coord => Array.isArray(coord) && coord.every(x => typeof x === \"number\"));\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  if (args.provider === \"together\") {\n    args.prompt = args.inputs;\n    const raw = await request(args, {\n      ...options,\n      taskHint: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.text\n    };\n  } else {\n    const res = toArray(await request(args, {\n      ...options,\n      taskHint: \"text-generation\"\n    }));\n    const isValidOutput = Array.isArray(res) && res.every(x => \"generated_text\" in x && typeof x?.generated_text === \"string\");\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n    }\n    return res?.[0];\n  }\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(await request(args, {\n    ...options,\n    taskHint: \"token-classification\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(await request(args, {\n    ...options,\n    taskHint: \"zero-shot-classification\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(x => Array.isArray(x.labels) && x.labels.every(_label => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every(_score => typeof _score === \"number\") && typeof x.sequence === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && (\n  /// Together.ai does not output a system_fingerprint\n  res.system_fingerprint === void 0 || typeof res.system_fingerprint === \"string\") && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(await request(reqArgs, {\n    ...options,\n    taskHint: \"document-question-answering\"\n  }));\n  const isValidOutput = Array.isArray(res) && res.every(elem => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && (typeof elem.end === \"number\" || typeof elem.end === \"undefined\") && (typeof elem.score === \"number\" || typeof elem.score === \"undefined\") && (typeof elem.start === \"number\" || typeof elem.start === \"undefined\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"visual-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(elem => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && typeof elem.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(x => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fn({\n          ...params,\n          accessToken\n        }, {\n          ...defaultOptions,\n          ...options\n        })\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) =>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fn({\n          ...params,\n          accessToken,\n          endpointUrl\n        }, {\n          ...defaultOptions,\n          ...options\n        })\n      });\n    }\n  }\n};\n\n// src/types.ts\nvar INFERENCE_PROVIDERS = [\"fal-ai\", \"replicate\", \"sambanova\", \"together\", \"hf-inference\"];\nexport { FAL_AI_SUPPORTED_MODEL_IDS, HfInference, HfInferenceEndpoint, INFERENCE_PROVIDERS, InferenceOutputError, REPLICATE_SUPPORTED_MODEL_IDS, SAMBANOVA_SUPPORTED_MODEL_IDS, TOGETHER_SUPPORTED_MODEL_IDS, audioClassification, audioToAudio, automaticSpeechRecognition, chatCompletion, chatCompletionStream, documentQuestionAnswering, featureExtraction, fillMask, imageClassification, imageSegmentation, imageToImage, imageToText, objectDetection, questionAnswering, request, sentenceSimilarity, streamingRequest, summarization, tableQuestionAnswering, tabularClassification, tabularRegression, textClassification, textGeneration, textGenerationStream, textToImage, textToSpeech, textToVideo, tokenClassification, translation, visualQuestionAnswering, zeroShotClassification, zeroShotImageClassification };","map":{"version":3,"names":["__defProp","Object","defineProperty","__export","target","all","name2","get","enumerable","tasks_exports","audioClassification","audioToAudio","automaticSpeechRecognition","chatCompletion","chatCompletionStream","documentQuestionAnswering","featureExtraction","fillMask","imageClassification","imageSegmentation","imageToImage","imageToText","objectDetection","questionAnswering","request","sentenceSimilarity","streamingRequest","summarization","tableQuestionAnswering","tabularClassification","tabularRegression","textClassification","textGeneration","textGenerationStream","textToImage","textToSpeech","textToVideo","tokenClassification","translation","visualQuestionAnswering","zeroShotClassification","zeroShotImageClassification","HF_HUB_URL","FAL_AI_API_BASE_URL","FAL_AI_SUPPORTED_MODEL_IDS","REPLICATE_API_BASE_URL","REPLICATE_SUPPORTED_MODEL_IDS","SAMBANOVA_API_BASE_URL","SAMBANOVA_SUPPORTED_MODEL_IDS","conversational","TOGETHER_API_BASE_URL","TOGETHER_SUPPORTED_MODEL_IDS","isUrl","modelOrUrl","test","startsWith","name","version","HF_HUB_INFERENCE_PROXY_TEMPLATE","tasks","makeRequestOptions","args","options","accessToken","endpointUrl","provider","maybeProvider","model","maybeModel","remainingArgs","otherArgs","forceTask","includeCredentials","taskHint","wait_for_model","use_cache","dont_load_model","chatCompletion2","Error","mapModel","loadDefaultModel","authMethod","url","makeUrl","headers","ownUserAgent","navigator","userAgent","filter","x","join","binary","data","credentials","version2","includes","split","input","info","method","body","JSON","stringify","signal","params","task","shouldProxy","baseUrl","replace","replaceAll","loadTaskInfo","taskInfo","models","length","id","res","fetch","ok","json","response","retry_on_error","status","contentType","some","ct","output","error","detail","message","text","blob","getLines","onLine","buffer","position","fieldLength","discardTrailingNewline","onChunk","arr","concat","bufLength","lineStart","lineEnd","subarray","getMessages","onId","onRetry","onMessage","newMessage","decoder","TextDecoder","line","field","decode","valueOffset","value","event","retry","parseInt","isNaN","a","b","Uint8Array","set","stream","reader","getReader","events","onEvent","push","done","read","parse","errorStr","releaseLock","InferenceOutputError","TypeError","constructor","pick","o","props","assign","map","prop","typedInclude","v","omit","propsArr","Array","isArray","letsKeep","keys","preparePayload","inputs","payload","isValidOutput","every","label","score","base64FromBytes","globalThis","Buffer","from","toString","bin","forEach","byte","String","fromCharCode","btoa","buildPayload","FAL_AI_SUPPORTED_BLOB_TYPES","Blob","type","base64audio","arrayBuffer","audio_url","parameters","urlResponse","validateOutput","elem","preparePayload2","mask","generated_text","box","xmin","ymin","xmax","ymax","response_format","prompt","images","image","b64_json","base64Data","base64Response","reqArgs","ArrayBuffer","preparePayload3","SUPPORTED_PROVIDERS","video","taskCache","Map","CACHE_DURATION","MAX_CACHE_ITEMS","getDefaultTask","key","cachedTask","date","Date","now","delete","modelTask","Authorization","then","resp","pipeline_tag","catch","size","next","defaultTask","isNumArrayRec","maxDepth","curDepth","sequence","token","token_str","answer","end","start","prepareInput","source_sentence","sourceSentence","summary_text","validate","aggregator","cells","coordinates","coord","toArray","obj","raw","choices","completion","entity_group","word","translation_text","labels","_label","scores","_score","created","system_fingerprint","usage","question","HfInference","defaultOptions","fn","entries","endpoint","HfInferenceEndpoint","INFERENCE_PROVIDERS"],"sources":["/home/khuram/ReactProjects/AI-Image-genrator/node_modules/@huggingface/inference/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  textToVideo: () => textToVideo,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/config.ts\nvar HF_HUB_URL = \"https://huggingface.co\";\n\n// src/providers/fal-ai.ts\nvar FAL_AI_API_BASE_URL = \"https://fal.run\";\nvar FAL_AI_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-schnell\": \"fal-ai/flux/schnell\",\n    \"black-forest-labs/FLUX.1-dev\": \"fal-ai/flux/dev\",\n    \"playgroundai/playground-v2.5-1024px-aesthetic\": \"fal-ai/playground-v25\",\n    \"ByteDance/SDXL-Lightning\": \"fal-ai/lightning-models\",\n    \"PixArt-alpha/PixArt-Sigma-XL-2-1024-MS\": \"fal-ai/pixart-sigma\",\n    \"stabilityai/stable-diffusion-3-medium\": \"fal-ai/stable-diffusion-v3-medium\",\n    \"Warlord-K/Sana-1024\": \"fal-ai/sana\",\n    \"fal/AuraFlow-v0.2\": \"fal-ai/aura-flow\",\n    \"stabilityai/stable-diffusion-3.5-large\": \"fal-ai/stable-diffusion-v35-large\",\n    \"stabilityai/stable-diffusion-3.5-large-turbo\": \"fal-ai/stable-diffusion-v35-large/turbo\",\n    \"stabilityai/stable-diffusion-3.5-medium\": \"fal-ai/stable-diffusion-v35-medium\",\n    \"Kwai-Kolors/Kolors\": \"fal-ai/kolors\"\n  },\n  \"automatic-speech-recognition\": {\n    \"openai/whisper-large-v3\": \"fal-ai/whisper\"\n  },\n  \"text-to-video\": {\n    \"genmo/mochi-1-preview\": \"fal-ai/mochi-v1\",\n    \"tencent/HunyuanVideo\": \"fal-ai/hunyuan-video\",\n    \"THUDM/CogVideoX-5b\": \"fal-ai/cogvideox-5b\",\n    \"Lightricks/LTX-Video\": \"fal-ai/ltx-video\"\n  }\n};\n\n// src/providers/replicate.ts\nvar REPLICATE_API_BASE_URL = \"https://api.replicate.com\";\nvar REPLICATE_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-dev\": \"black-forest-labs/flux-dev\",\n    \"black-forest-labs/FLUX.1-schnell\": \"black-forest-labs/flux-schnell\",\n    \"ByteDance/Hyper-SD\": \"bytedance/hyper-flux-16step:382cf8959fb0f0d665b26e7e80b8d6dc3faaef1510f14ce017e8c732bb3d1eb7\",\n    \"ByteDance/SDXL-Lightning\": \"bytedance/sdxl-lightning-4step:5599ed30703defd1d160a25a63321b4dec97101d98b4674bcc56e41f62f35637\",\n    \"playgroundai/playground-v2.5-1024px-aesthetic\": \"playgroundai/playground-v2.5-1024px-aesthetic:a45f82a1382bed5c7aeb861dac7c7d191b0fdf74d8d57c4a0e6ed7d4d0bf7d24\",\n    \"stabilityai/stable-diffusion-3.5-large-turbo\": \"stability-ai/stable-diffusion-3.5-large-turbo\",\n    \"stabilityai/stable-diffusion-3.5-large\": \"stability-ai/stable-diffusion-3.5-large\",\n    \"stabilityai/stable-diffusion-3.5-medium\": \"stability-ai/stable-diffusion-3.5-medium\",\n    \"stabilityai/stable-diffusion-xl-base-1.0\": \"stability-ai/sdxl:7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc\"\n  },\n  \"text-to-speech\": {\n    \"OuteAI/OuteTTS-0.3-500M\": \"jbilcke/oute-tts:3c645149db020c85d080e2f8cfe482a0e68189a922cde964fa9e80fb179191f3\",\n    \"hexgrad/Kokoro-82M\": \"jaaari/kokoro-82m:dfdf537ba482b029e0a761699e6f55e9162cfd159270bfe0e44857caa5f275a6\"\n  },\n  \"text-to-video\": {\n    \"genmo/mochi-1-preview\": \"genmoai/mochi-1:1944af04d098ef69bed7f9d335d102e652203f268ec4aaa2d836f6217217e460\"\n  }\n};\n\n// src/providers/sambanova.ts\nvar SAMBANOVA_API_BASE_URL = \"https://api.sambanova.ai\";\nvar SAMBANOVA_SUPPORTED_MODEL_IDS = {\n  /** Chat completion / conversational */\n  conversational: {\n    \"deepseek-ai/DeepSeek-Distill-R1-Llama-70B\": \"DeepSeek-Distill-R1-Llama-70B\",\n    \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen2.5-Coder-32B-Instruct\",\n    \"Qwen/Qwen2.5-72B-Instruct\": \"Qwen2.5-72B-Instruct\",\n    \"Qwen/QwQ-32B-Preview\": \"QwQ-32B-Preview\",\n    \"meta-llama/Llama-3.3-70B-Instruct\": \"Meta-Llama-3.3-70B-Instruct\",\n    \"meta-llama/Llama-3.2-1B-Instruct\": \"Meta-Llama-3.2-1B-Instruct\",\n    \"meta-llama/Llama-3.2-3B-Instruct\": \"Meta-Llama-3.2-3B-Instruct\",\n    \"meta-llama/Llama-3.2-11B-Vision-Instruct\": \"Llama-3.2-11B-Vision-Instruct\",\n    \"meta-llama/Llama-3.2-90B-Vision-Instruct\": \"Llama-3.2-90B-Vision-Instruct\",\n    \"meta-llama/Llama-3.1-8B-Instruct\": \"Meta-Llama-3.1-8B-Instruct\",\n    \"meta-llama/Llama-3.1-70B-Instruct\": \"Meta-Llama-3.1-70B-Instruct\",\n    \"meta-llama/Llama-3.1-405B-Instruct\": \"Meta-Llama-3.1-405B-Instruct\",\n    \"meta-llama/Llama-Guard-3-8B\": \"Meta-Llama-Guard-3-8B\"\n  }\n};\n\n// src/providers/together.ts\nvar TOGETHER_API_BASE_URL = \"https://api.together.xyz\";\nvar TOGETHER_SUPPORTED_MODEL_IDS = {\n  \"text-to-image\": {\n    \"black-forest-labs/FLUX.1-Canny-dev\": \"black-forest-labs/FLUX.1-canny\",\n    \"black-forest-labs/FLUX.1-Depth-dev\": \"black-forest-labs/FLUX.1-depth\",\n    \"black-forest-labs/FLUX.1-dev\": \"black-forest-labs/FLUX.1-dev\",\n    \"black-forest-labs/FLUX.1-Redux-dev\": \"black-forest-labs/FLUX.1-redux\",\n    \"black-forest-labs/FLUX.1-schnell\": \"black-forest-labs/FLUX.1-pro\",\n    \"stabilityai/stable-diffusion-xl-base-1.0\": \"stabilityai/stable-diffusion-xl-base-1.0\"\n  },\n  conversational: {\n    \"databricks/dbrx-instruct\": \"databricks/dbrx-instruct\",\n    \"deepseek-ai/DeepSeek-R1\": \"deepseek-ai/DeepSeek-R1\",\n    \"deepseek-ai/DeepSeek-V3\": \"deepseek-ai/DeepSeek-V3\",\n    \"deepseek-ai/deepseek-llm-67b-chat\": \"deepseek-ai/deepseek-llm-67b-chat\",\n    \"google/gemma-2-9b-it\": \"google/gemma-2-9b-it\",\n    \"google/gemma-2b-it\": \"google/gemma-2-27b-it\",\n    \"meta-llama/Llama-2-13b-chat-hf\": \"meta-llama/Llama-2-13b-chat-hf\",\n    \"meta-llama/Llama-2-7b-chat-hf\": \"meta-llama/Llama-2-7b-chat-hf\",\n    \"meta-llama/Llama-3.2-11B-Vision-Instruct\": \"meta-llama/Llama-Vision-Free\",\n    \"meta-llama/Llama-3.2-3B-Instruct\": \"meta-llama/Llama-3.2-3B-Instruct-Turbo\",\n    \"meta-llama/Llama-3.2-90B-Vision-Instruct\": \"meta-llama/Llama-3.2-90B-Vision-Instruct-Turbo\",\n    \"meta-llama/Llama-3.3-70B-Instruct\": \"meta-llama/Llama-3.3-70B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3-70B-Instruct\": \"meta-llama/Llama-3-70b-chat-hf\",\n    \"meta-llama/Meta-Llama-3-8B-Instruct\": \"meta-llama/Meta-Llama-3-8B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-405B-Instruct\": \"meta-llama/Llama-3.2-11B-Vision-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-70B-Instruct\": \"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\",\n    \"meta-llama/Meta-Llama-3.1-8B-Instruct\": \"meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K\",\n    \"microsoft/WizardLM-2-8x22B\": \"microsoft/WizardLM-2-8x22B\",\n    \"mistralai/Mistral-7B-Instruct-v0.3\": \"mistralai/Mistral-7B-Instruct-v0.3\",\n    \"mistralai/Mistral-Small-24B-Instruct-2501\": \"mistralai/Mistral-Small-24B-Instruct-2501\",\n    \"mistralai/Mixtral-8x22B-Instruct-v0.1\": \"mistralai/Mixtral-8x22B-Instruct-v0.1\",\n    \"mistralai/Mixtral-8x7B-Instruct-v0.1\": \"mistralai/Mixtral-8x7B-Instruct-v0.1\",\n    \"NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO\": \"NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO\",\n    \"nvidia/Llama-3.1-Nemotron-70B-Instruct-HF\": \"nvidia/Llama-3.1-Nemotron-70B-Instruct-HF\",\n    \"Qwen/Qwen2-72B-Instruct\": \"Qwen/Qwen2-72B-Instruct\",\n    \"Qwen/Qwen2.5-72B-Instruct\": \"Qwen/Qwen2.5-72B-Instruct-Turbo\",\n    \"Qwen/Qwen2.5-7B-Instruct\": \"Qwen/Qwen2.5-7B-Instruct-Turbo\",\n    \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen/Qwen2.5-Coder-32B-Instruct\",\n    \"Qwen/QwQ-32B-Preview\": \"Qwen/QwQ-32B-Preview\",\n    \"scb10x/llama-3-typhoon-v1.5-8b-instruct\": \"scb10x/scb10x-llama3-typhoon-v1-5-8b-instruct\",\n    \"scb10x/llama-3-typhoon-v1.5x-70b-instruct-awq\": \"scb10x/scb10x-llama3-typhoon-v1-5x-4f316\"\n  },\n  \"text-generation\": {\n    \"meta-llama/Llama-2-70b-hf\": \"meta-llama/Llama-2-70b-hf\",\n    \"mistralai/Mixtral-8x7B-v0.1\": \"mistralai/Mixtral-8x7B-v0.1\"\n  }\n};\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// package.json\nvar name = \"@huggingface/inference\";\nvar version = \"3.1.6\";\n\n// src/lib/makeRequestOptions.ts\nvar HF_HUB_INFERENCE_PROXY_TEMPLATE = `${HF_HUB_URL}/api/inference-proxy/{{PROVIDER}}`;\nvar tasks = null;\nasync function makeRequestOptions(args, options) {\n  const { accessToken, endpointUrl, provider: maybeProvider, model: maybeModel, ...remainingArgs } = args;\n  let otherArgs = remainingArgs;\n  const provider = maybeProvider ?? \"hf-inference\";\n  const { forceTask, includeCredentials, taskHint, wait_for_model, use_cache, dont_load_model, chatCompletion: chatCompletion2 } = options ?? {};\n  if (endpointUrl && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use endpointUrl with a third-party provider.`);\n  }\n  if (forceTask && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use forceTask with a third-party provider.`);\n  }\n  if (maybeModel && isUrl(maybeModel)) {\n    throw new Error(`Model URLs are no longer supported. Use endpointUrl instead.`);\n  }\n  let model;\n  if (!maybeModel) {\n    if (taskHint) {\n      model = mapModel({ model: await loadDefaultModel(taskHint), provider, taskHint, chatCompletion: chatCompletion2 });\n    } else {\n      throw new Error(\"No model provided, and no default model found for this task\");\n    }\n  } else {\n    model = mapModel({ model: maybeModel, provider, taskHint, chatCompletion: chatCompletion2 });\n  }\n  const authMethod = accessToken ? accessToken.startsWith(\"hf_\") ? \"hf-token\" : \"provider-key\" : includeCredentials === \"include\" ? \"credentials-include\" : \"none\";\n  const url = endpointUrl ? chatCompletion2 ? endpointUrl + `/v1/chat/completions` : endpointUrl : makeUrl({\n    authMethod,\n    chatCompletion: chatCompletion2 ?? false,\n    forceTask,\n    model,\n    provider: provider ?? \"hf-inference\",\n    taskHint\n  });\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = provider === \"fal-ai\" && authMethod === \"provider-key\" ? `Key ${accessToken}` : `Bearer ${accessToken}`;\n  }\n  const ownUserAgent = `${name}/${version}`;\n  headers[\"User-Agent\"] = [ownUserAgent, typeof navigator !== \"undefined\" ? navigator.userAgent : void 0].filter((x) => x !== void 0).join(\" \");\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  if (provider === \"hf-inference\") {\n    if (wait_for_model) {\n      headers[\"X-Wait-For-Model\"] = \"true\";\n    }\n    if (use_cache === false) {\n      headers[\"X-Use-Cache\"] = \"false\";\n    }\n    if (dont_load_model) {\n      headers[\"X-Load-Model\"] = \"0\";\n    }\n  }\n  if (provider === \"replicate\") {\n    headers[\"Prefer\"] = \"wait\";\n  }\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  if (provider === \"replicate\") {\n    const version2 = model.includes(\":\") ? model.split(\":\")[1] : void 0;\n    otherArgs = { input: otherArgs, version: version2 };\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...otherArgs,\n      ...chatCompletion2 || provider === \"together\" ? { model } : void 0\n    }),\n    ...credentials ? { credentials } : void 0,\n    signal: options?.signal\n  };\n  return { url, info };\n}\nfunction mapModel(params) {\n  if (params.provider === \"hf-inference\") {\n    return params.model;\n  }\n  if (!params.taskHint) {\n    throw new Error(\"taskHint must be specified when using a third-party provider\");\n  }\n  const task = params.taskHint === \"text-generation\" && params.chatCompletion ? \"conversational\" : params.taskHint;\n  const model = (() => {\n    switch (params.provider) {\n      case \"fal-ai\":\n        return FAL_AI_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"replicate\":\n        return REPLICATE_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"sambanova\":\n        return SAMBANOVA_SUPPORTED_MODEL_IDS[task]?.[params.model];\n      case \"together\":\n        return TOGETHER_SUPPORTED_MODEL_IDS[task]?.[params.model];\n    }\n  })();\n  if (!model) {\n    throw new Error(`Model ${params.model} is not supported for task ${task} and provider ${params.provider}`);\n  }\n  return model;\n}\nfunction makeUrl(params) {\n  if (params.authMethod === \"none\" && params.provider !== \"hf-inference\") {\n    throw new Error(\"Authentication is required when requesting a third-party provider. Please provide accessToken\");\n  }\n  const shouldProxy = params.provider !== \"hf-inference\" && params.authMethod !== \"provider-key\";\n  switch (params.provider) {\n    case \"fal-ai\": {\n      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : FAL_AI_API_BASE_URL;\n      return `${baseUrl}/${params.model}`;\n    }\n    case \"replicate\": {\n      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : REPLICATE_API_BASE_URL;\n      if (params.model.includes(\":\")) {\n        return `${baseUrl}/v1/predictions`;\n      }\n      return `${baseUrl}/v1/models/${params.model}/predictions`;\n    }\n    case \"sambanova\": {\n      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : SAMBANOVA_API_BASE_URL;\n      if (params.taskHint === \"text-generation\" && params.chatCompletion) {\n        return `${baseUrl}/v1/chat/completions`;\n      }\n      return baseUrl;\n    }\n    case \"together\": {\n      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", params.provider) : TOGETHER_API_BASE_URL;\n      if (params.taskHint === \"text-to-image\") {\n        return `${baseUrl}/v1/images/generations`;\n      }\n      if (params.taskHint === \"text-generation\") {\n        if (params.chatCompletion) {\n          return `${baseUrl}/v1/chat/completions`;\n        }\n        return `${baseUrl}/v1/completions`;\n      }\n      return baseUrl;\n    }\n    default: {\n      const baseUrl = HF_HUB_INFERENCE_PROXY_TEMPLATE.replaceAll(\"{{PROVIDER}}\", \"hf-inference\");\n      const url = params.forceTask ? `${baseUrl}/pipeline/${params.forceTask}/${params.model}` : `${baseUrl}/models/${params.model}`;\n      if (params.taskHint === \"text-generation\" && params.chatCompletion) {\n        return url + `/v1/chat/completions`;\n      }\n      return url;\n    }\n  }\n}\nasync function loadDefaultModel(task) {\n  if (!tasks) {\n    tasks = await loadTaskInfo();\n  }\n  const taskInfo = tasks[task];\n  if ((taskInfo?.models.length ?? 0) <= 0) {\n    throw new Error(`No default model defined for task ${task}, please define the model explicitly.`);\n  }\n  return taskInfo.models[0].id;\n}\nasync function loadTaskInfo() {\n  const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n  if (!res.ok) {\n    throw new Error(\"Failed to load tasks definitions from Hugging Face Hub.\");\n  }\n  return await res.json();\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    const contentType = response.headers.get(\"Content-Type\");\n    if ([\"application/json\", \"application/problem+json\"].some((ct) => contentType?.startsWith(ct))) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(\n          `Server ${args.model} does not seem to support chat completion. Error: ${JSON.stringify(output.error)}`\n        );\n      }\n      if (output.error || output.detail) {\n        throw new Error(JSON.stringify(output.error ?? output.detail));\n      } else {\n        throw new Error(output);\n      }\n    }\n    const message = contentType?.startsWith(\"text/plain;\") ? await response.text() : void 0;\n    throw new Error(message ?? \"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return yield* streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (typeof output.error === \"string\") {\n        throw new Error(output.error);\n      }\n      if (output.error && \"message\" in output.error && typeof output.error.message === \"string\") {\n        throw new Error(output.error.message);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            const errorStr = typeof data.error === \"string\" ? data.error : typeof data.error === \"object\" && data.error && \"message\" in data.error && typeof data.error.message === \"string\" ? data.error.message : JSON.stringify(data.error);\n            throw new Error(`Error forwarded from backend: ` + errorStr);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign(\n    {},\n    ...props.map((prop) => {\n      if (o[prop] !== void 0) {\n        return { [prop]: o[prop] };\n      }\n    })\n  );\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/tasks/audio/utils.ts\nfunction preparePayload(args) {\n  return \"data\" in args ? args : {\n    ...omit(args, \"inputs\"),\n    data: args.inputs\n  };\n}\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const payload = await buildPayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\nvar FAL_AI_SUPPORTED_BLOB_TYPES = [\"audio/mpeg\", \"audio/mp4\", \"audio/wav\", \"audio/x-wav\"];\nasync function buildPayload(args) {\n  if (args.provider === \"fal-ai\") {\n    const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : void 0;\n    const contentType = blob?.type;\n    if (!contentType) {\n      throw new Error(\n        `Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`\n      );\n    }\n    if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {\n      throw new Error(\n        `Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(\n          \", \"\n        )}`\n      );\n    }\n    const base64audio = base64FromBytes(new Uint8Array(await blob.arrayBuffer()));\n    return {\n      ...\"data\" in args ? omit(args, \"data\") : omit(args, \"inputs\"),\n      audio_url: `data:${contentType};base64,${base64audio}`\n    };\n  } else {\n    return preparePayload(args);\n  }\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const payload = args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    text: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-speech\"\n  });\n  if (res instanceof Blob) {\n    return res;\n  }\n  if (res && typeof res === \"object\") {\n    if (\"output\" in res) {\n      if (typeof res.output === \"string\") {\n        const urlResponse = await fetch(res.output);\n        const blob = await urlResponse.blob();\n        return blob;\n      } else if (Array.isArray(res.output)) {\n        const urlResponse = await fetch(res.output[0]);\n        const blob = await urlResponse.blob();\n        return blob;\n      }\n    }\n  }\n  throw new InferenceOutputError(\"Expected Blob or object with output\");\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"audio-to-audio\"\n  });\n  return validateOutput(res);\n}\nfunction validateOutput(output) {\n  if (!Array.isArray(output)) {\n    throw new InferenceOutputError(\"Expected Array\");\n  }\n  if (!output.every((elem) => {\n    return typeof elem === \"object\" && elem && \"label\" in elem && typeof elem.label === \"string\" && \"content-type\" in elem && typeof elem[\"content-type\"] === \"string\" && \"blob\" in elem && typeof elem.blob === \"string\";\n  })) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, audio: Blob}>\");\n  }\n  return output;\n}\n\n// src/tasks/cv/utils.ts\nfunction preparePayload2(args) {\n  return \"data\" in args ? args : { ...omit(args, \"inputs\"), data: args.inputs };\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const payload = preparePayload2(args);\n  const res = (await request(payload, {\n    ...options,\n    taskHint: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const payload = args.provider === \"together\" || args.provider === \"fal-ai\" || args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    ...args.provider !== \"replicate\" ? { response_format: \"base64\" } : void 0,\n    prompt: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-image\"\n  });\n  if (res && typeof res === \"object\") {\n    if (args.provider === \"fal-ai\" && \"images\" in res && Array.isArray(res.images) && res.images[0].url) {\n      const image = await fetch(res.images[0].url);\n      return await image.blob();\n    }\n    if (\"data\" in res && Array.isArray(res.data) && res.data[0].b64_json) {\n      const base64Data = res.data[0].b64_json;\n      const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);\n      const blob = await base64Response.blob();\n      return blob;\n    }\n    if (\"output\" in res && Array.isArray(res.output)) {\n      const urlResponse = await fetch(res.output[0]);\n      const blob = await urlResponse.blob();\n      return blob;\n    }\n  }\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\n      )\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function preparePayload3(args) {\n  if (args.inputs instanceof Blob) {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(new Uint8Array(await args.inputs.arrayBuffer()))\n      }\n    };\n  } else {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(\n          new Uint8Array(\n            args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n          )\n        )\n      }\n    };\n  }\n}\nasync function zeroShotImageClassification(args, options) {\n  const payload = await preparePayload3(args);\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToVideo.ts\nvar SUPPORTED_PROVIDERS = [\"fal-ai\", \"replicate\"];\nasync function textToVideo(args, options) {\n  if (!args.provider || !typedInclude(SUPPORTED_PROVIDERS, args.provider)) {\n    throw new Error(\n      `textToVideo inference is only supported for the following providers: ${SUPPORTED_PROVIDERS.join(\", \")}`\n    );\n  }\n  const payload = args.provider === \"fal-ai\" || args.provider === \"replicate\" ? { ...omit(args, [\"inputs\", \"parameters\"]), ...args.parameters, prompt: args.inputs } : args;\n  const res = await request(payload, {\n    ...options,\n    taskHint: \"text-to-video\"\n  });\n  if (args.provider === \"fal-ai\") {\n    const isValidOutput = typeof res === \"object\" && !!res && \"video\" in res && typeof res.video === \"object\" && !!res.video && \"url\" in res.video && typeof res.video.url === \"string\" && isUrl(res.video.url);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { video: { url: string } }\");\n    }\n    const urlResponse = await fetch(res.video.url);\n    return await urlResponse.blob();\n  } else {\n    const isValidOutput = typeof res === \"object\" && !!res && \"output\" in res && typeof res.output === \"string\" && isUrl(res.output);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { output: string }\");\n    }\n    const urlResponse = await fetch(res.output);\n    return await urlResponse.blob();\n  }\n}\n\n// src/lib/getDefaultTask.ts\nvar taskCache = /* @__PURE__ */ new Map();\nvar CACHE_DURATION = 10 * 60 * 1e3;\nvar MAX_CACHE_ITEMS = 1e3;\nasync function getDefaultTask(model, accessToken, options) {\n  if (isUrl(model)) {\n    return null;\n  }\n  const key = `${model}:${accessToken}`;\n  let cachedTask = taskCache.get(key);\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\n    taskCache.delete(key);\n    cachedTask = void 0;\n  }\n  if (cachedTask === void 0) {\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n      headers: accessToken ? { Authorization: `Bearer ${accessToken}` } : {}\n    }).then((resp) => resp.json()).then((json) => json.pipeline_tag).catch(() => null);\n    if (!modelTask) {\n      return null;\n    }\n    cachedTask = { task: modelTask, date: /* @__PURE__ */ new Date() };\n    taskCache.set(key, { task: modelTask, date: /* @__PURE__ */ new Date() });\n    if (taskCache.size > MAX_CACHE_ITEMS) {\n      taskCache.delete(taskCache.keys().next().value);\n    }\n  }\n  return cachedTask.task;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"feature-extraction\",\n    ...defaultTask === \"sentence-similarity\" && { forceTask: \"feature-extraction\" }\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth)\n      return false;\n    if (arr.every((x) => Array.isArray(x))) {\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every((x) => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem.answer === \"string\" && typeof elem.end === \"number\" && typeof elem.score === \"number\" && typeof elem.start === \"number\"\n  ) : typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end: number, score: number, start: number}>\");\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(prepareInput(args), {\n    ...options,\n    taskHint: \"sentence-similarity\",\n    ...defaultTask === \"feature-extraction\" && { forceTask: \"sentence-similarity\" }\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\nfunction prepareInput(args) {\n  return {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    inputs: { ...omit(args.inputs, \"sourceSentence\") },\n    parameters: { source_sentence: args.inputs.sourceSentence, ...args.parameters }\n  };\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"table-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every((elem) => validate(elem)) : validate(res);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\nfunction validate(elem) {\n  return typeof elem === \"object\" && !!elem && \"aggregator\" in elem && typeof elem.aggregator === \"string\" && \"answer\" in elem && typeof elem.answer === \"string\" && \"cells\" in elem && Array.isArray(elem.cells) && elem.cells.every((x) => typeof x === \"string\") && \"coordinates\" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every(\n    (coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\")\n  );\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  if (args.provider === \"together\") {\n    args.prompt = args.inputs;\n    const raw = await request(args, {\n      ...options,\n      taskHint: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.text\n    };\n  } else {\n    const res = toArray(\n      await request(args, {\n        ...options,\n        taskHint: \"text-generation\"\n      })\n    );\n    const isValidOutput = Array.isArray(res) && res.every((x) => \"generated_text\" in x && typeof x?.generated_text === \"string\");\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n    }\n    return res?.[0];\n  }\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"token-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"zero-shot-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && /// Together.ai does not output a system_fingerprint\n  (res.system_fingerprint === void 0 || typeof res.system_fingerprint === \"string\") && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, {\n      ...options,\n      taskHint: \"document-question-answering\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && (typeof elem.end === \"number\" || typeof elem.end === \"undefined\") && (typeof elem.score === \"number\" || typeof elem.score === \"undefined\") && (typeof elem.start === \"number\" || typeof elem.start === \"undefined\")\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"visual-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && typeof elem.score === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\n\n// src/types.ts\nvar INFERENCE_PROVIDERS = [\"fal-ai\", \"replicate\", \"sambanova\", \"together\", \"hf-inference\"];\nexport {\n  FAL_AI_SUPPORTED_MODEL_IDS,\n  HfInference,\n  HfInferenceEndpoint,\n  INFERENCE_PROVIDERS,\n  InferenceOutputError,\n  REPLICATE_SUPPORTED_MODEL_IDS,\n  SAMBANOVA_SUPPORTED_MODEL_IDS,\n  TOGETHER_SUPPORTED_MODEL_IDS,\n  audioClassification,\n  audioToAudio,\n  automaticSpeechRecognition,\n  chatCompletion,\n  chatCompletionStream,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToImage,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  tabularClassification,\n  tabularRegression,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  textToVideo,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification,\n  zeroShotImageClassification\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}